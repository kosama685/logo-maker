{"version":3,"file":"static/js/417.dbc18606.chunk.js","mappings":"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","sources":["components/ui/common/ColorsUIsvg.tsx","components/ui/common/LayoutUIsvg.tsx","components/ui/common/LogoUIsvg.tsx","components/ui/common/TypographyUIsvg.tsx","components/ui/DownloadButton.tsx","components/ui/common/ColorPicker.tsx","components/ui/SelectColors.tsx","components/ui/common/HorizontalLineUIsvg.tsx","components/ui/SelectLayout.tsx","components/ui/LogoItem.tsx","components/ui/SelectLogo.tsx","components/ui/SelectTypography.tsx","engine/export.ts","Creator.tsx"],"sourcesContent":["import * as React from \"react\"\n\nconst ColorsUIsvg: React.FunctionComponent<{\n    isSelected?: boolean\n    clasName?: string\n}> = (props: { isSelected?: boolean; clasName?: string }) => {\n    return (\n        <svg\n            width=\"36\"\n            height=\"36\"\n            viewBox=\"0 0 36 36\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className={props?.clasName}\n        >\n            <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M17.9998 31.5C10.4173 31.5 4.29431 25.248 4.50581 17.6175C4.70081 10.5735 10.5733 4.70099 17.6173 4.50599C25.2478 4.29449 31.4998 10.4175 31.4998 18V19.5C31.4998 21.1575 30.1573 22.5 28.4998 22.5H25.4053C23.4118 22.5 21.9733 24.408 22.5208 26.3235L22.9063 27.675C23.4553 29.592 22.0153 31.5 20.0233 31.5H17.9998Z\"\n                fill={props?.isSelected ? \"#43C2D1\" : \"white\"}\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M17.9985 9.56248C17.7705 9.56248 17.586 9.74698 17.589 9.97498C17.589 10.203 17.7735 10.3875 18.0015 10.3875C18.2295 10.3875 18.414 10.203 18.414 9.97498C18.411 9.74698 18.228 9.56248 17.9985 9.56248\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M10.3859 17.9985C10.3859 17.7705 10.2014 17.586 9.97487 17.589C9.74687 17.589 9.56237 17.7735 9.56237 18.0015C9.56237 18.2295 9.74687 18.414 9.97487 18.414C10.2029 18.414 10.3859 18.228 10.3859 17.9985\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M23.9654 12.033C23.8049 11.8725 23.5439 11.8725 23.3849 12.0345C23.2244 12.195 23.2244 12.456 23.3849 12.6165C23.5454 12.777 23.8064 12.777 23.9669 12.6165C24.1274 12.4545 24.1274 12.195 23.9654 12.033\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M12.6148 23.3835C12.4543 23.223 12.1933 23.223 12.0343 23.385C11.8738 23.5455 11.8738 23.8065 12.0343 23.967C12.1948 24.1275 12.4558 24.1275 12.6163 23.967C12.7768 23.8065 12.7768 23.5455 12.6148 23.3835\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M12.6166 12.615C12.7771 12.4545 12.7771 12.1935 12.6151 12.0345C12.4546 11.874 12.1936 11.874 12.0331 12.0345C11.8726 12.195 11.8726 12.456 12.0331 12.6165C12.1936 12.777 12.4546 12.777 12.6166 12.615\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    )\n}\n\nexport default ColorsUIsvg\n","import * as React from \"react\"\n\nconst LayoutUIsvg: React.FunctionComponent<{\n    isSelected?: boolean\n    clasName?: string\n}> = (props: { isSelected?: boolean; clasName?: string }) => {\n    return (\n        <svg\n            width=\"36\"\n            height=\"36\"\n            viewBox=\"0 0 30 30\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className={props?.clasName}\n        >\n            <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M15 28.5C7.5435 28.5 1.5 22.4565 1.5 15C1.5 7.5435 7.5435 1.5 15 1.5C22.4565 1.5 28.5 7.5435 28.5 15C28.5 22.4565 22.4565 28.5 15 28.5Z\"\n                fill={props?.isSelected ? \"#43C2D1\" : \"white\"}\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M15 6.69V11.88\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M18.1201 15H23.3101\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M15 18.12V23.31\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M6.68994 15H11.8799\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M19.5 10.5L21 9\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M9 21L10.5 19.5\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M19.5 19.5L21 21\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M9 9L10.5 10.5\"\n                stroke={props?.isSelected ? \"white\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    )\n}\n\nexport default LayoutUIsvg\n","import * as React from \"react\"\n\nconst LogoUIsvg: React.FunctionComponent<{\n    isSelected?: boolean\n    clasName?: string\n}> = (props: { isSelected?: boolean; clasName?: string }) => {\n    return (\n        <svg\n            width=\"36\"\n            height=\"36\"\n            viewBox=\"0 0 36 36\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className={props?.clasName}\n        >\n            <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M31.5 23.9985V12.0015C31.5 10.9305 30.927 9.94049 29.997 9.40949L19.485 3.38999C18.5655 2.86349 17.436 2.86349 16.5165 3.38999L6.003 9.40949C5.073 9.94199 4.5 10.9305 4.5 12.0015V23.997C4.5 25.068 5.073 26.058 6.003 26.589L16.515 32.6085C17.4345 33.135 18.564 33.135 19.4835 32.6085L29.9955 26.589C30.927 26.058 31.5 25.0695 31.5 23.9985Z\"\n                fill={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M18.0001 18L4.93506 25.545\"\n                stroke=\"white\"\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M18 18L31.065 10.455\"\n                stroke=\"white\"\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path d=\"M18 18V3\" stroke=\"white\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n            <path d=\"M18 18V33\" stroke=\"white\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n            <path\n                d=\"M18.0001 18L4.93506 10.455\"\n                stroke=\"white\"\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M18 18L31.065 25.545\"\n                stroke=\"white\"\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    )\n}\n\nexport default LogoUIsvg\n","import * as React from \"react\"\n\nconst TypographyUIsvg: React.FunctionComponent<{\n    isSelected?: boolean\n    clasName?: string\n}> = (props: { isSelected?: boolean; clasName?: string }) => {\n    return (\n        <svg\n            width=\"36\"\n            height=\"36\"\n            viewBox=\"0 0 36 36\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className={props?.clasName}\n        >\n            <path\n                d=\"M13.4536 22.5L18.0001 13.5L22.5466 22.5\"\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M14.595 20.28H21.42\"\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M7.5 10.5V25.5\"\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M28.5 25.5V10.5\"\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M30 31.5H27C26.172 31.5 25.5 30.828 25.5 30V27C25.5 26.172 26.172 25.5 27 25.5H30C30.828 25.5 31.5 26.172 31.5 27V30C31.5 30.828 30.828 31.5 30 31.5Z\"\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M9 31.5H6C5.172 31.5 4.5 30.828 4.5 30V27C4.5 26.172 5.172 25.5 6 25.5H9C9.828 25.5 10.5 26.172 10.5 27V30C10.5 30.828 9.828 31.5 9 31.5Z\"\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M30 10.5H27C26.172 10.5 25.5 9.828 25.5 9V6C25.5 5.172 26.172 4.5 27 4.5H30C30.828 4.5 31.5 5.172 31.5 6V9C31.5 9.828 30.828 10.5 30 10.5Z\"\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M9 10.5H6C5.172 10.5 4.5 9.828 4.5 9V6C4.5 5.172 5.172 4.5 6 4.5H9C9.828 4.5 10.5 5.172 10.5 6V9C10.5 9.828 9.828 10.5 9 10.5Z\"\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M10.5 28.5H25.5\"\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <path\n                d=\"M25.5 7.5H10.5\"\n                stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"}\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    )\n}\n\nexport default TypographyUIsvg\n","import * as React from \"react\"\nimport classnames from \"classnames\"\n\nimport { DownLoadLinkAction, DownLoadLinkState } from \"./../../Creator\"\n\n/**\n * This function will the render the `Download Button` from design.\n *\n * @param props The CSS class and the download link of the `zip` file\n */\nconst DownloadButton: React.FunctionComponent<{\n    className?: string\n    downloadLink?: DownLoadLinkState\n    dispatch: React.Dispatch<DownLoadLinkAction>\n}> = (props: {\n    className?: string\n    downloadLink?: DownLoadLinkState\n    dispatch?: React.Dispatch<DownLoadLinkAction>\n}) => {\n        const [status, setStatus] = React.useState<'normal' | 'expanded'>('normal')\n        const download = (type: \"zip\" | \"png\" | \"svg\") => {\n            if (props.downloadLink?.status !== \"loading\") {\n                props.dispatch?.({ type: \"create\", value: type })\n            }\n        }\n\n        return (\n            (<div className={classnames(\"download-button\", props?.className, status)}>\n                {\n                    status === 'normal' ? (\n                        <button\n                            onClick={() => {\n                                setStatus('expanded')\n                            }}\n                        >\n                            {props.downloadLink?.status === \"loading\" ? (\n                                <div className=\"content-loader\"></div>\n                            ) : (\n                                <span>Download</span>\n                            )}\n                        </button>\n                    ) : (\n                        <React.Fragment>\n                            <div className=\"btn-group\">\n                                <button onClick={\n                                    () => {\n                                        download('png')\n                                        setStatus('normal')\n                                    }\n                                }>\n                                    <span>PNG</span>\n                                </button>\n                                <button onClick={\n                                    () => {\n                                        download('zip')\n                                        setStatus('normal')\n                                    }\n                                }>\n                                    <span>BUNDLE</span>\n                                </button>\n                                <button onClick={\n                                    () => {\n                                        download('svg')\n                                        setStatus('normal')\n                                    }\n                                }>\n                                    <span>SVG</span>\n                                </button>\n                            </div>\n\n                        </React.Fragment>\n                    )\n                }\n\n            </div>)\n\n        )\n    }\n\nexport default DownloadButton\n\n// const fonts = [\n//     UIStore.useState((s) => s.title.style.fontFamily),\n//     UIStore.useState((s) => s.slogan.style.fontFamily),\n// ]\n\n// const downloadSVGasPNG = () => {\n//     const svg = document.querySelector(\"#image-logo\")?.childNodes[0]\n\n//     if (!svg) {\n//         return\n//     }\n//     const xml = new XMLSerializer().serializeToString(svg)\n//     const svg64 = btoa(xml)\n//     const image = \"data:image/svg+xml;base64,\" + svg64\n//     const element = document.createElement(\"a\")\n\n//     const sourceImage = new Image()\n\n//     sourceImage.onload = () => {\n//         console.log(\"Load\")\n//         const canvas = document.createElement(\"canvas\")\n//         canvas.height = 280\n//         canvas.width = 300\n\n//         const ctx = canvas.getContext(\"2d\")\n\n//         ctx?.drawImage(sourceImage, 0, 0, 280, 300)\n\n//         element.download = \"logo.png\"\n//         element.href = canvas.toDataURL(\"image/png\")\n//         element.click()\n//         element.remove()\n//     }\n\n//     sourceImage.src = image\n// }\n\n// const downloadSVG = () => {\n//     const node = document.querySelector(\"#image-logo\")?.cloneNode(true)\n\n//     if (!node) {\n//         return\n//     }\n//     // const defs = document.createElement(\"defs\")\n//     // const style = document.createElement(\"style\")\n//     // style.innerHTML = `\n//     //         @import url(\"${generateUrlForFont(fonts[0])}\");\n//     //         @import url(\"${generateUrlForFont(fonts[1])}\");\n//     // `\n//     // node.firstChild?.appendChild(style)\n\n//     const svg = (node as Element).innerHTML\n\n//     const blob = new Blob([svg.toString()])\n//     const element = document.createElement(\"a\")\n//     element.download = \"logo.svg\"\n//     element.href = window.URL.createObjectURL(blob)\n//     element.click()\n//     element.remove()\n// }\n\n/* <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                download=\"LogoMakerExport.zip\"\n                href={props.downloadLink || \" \"}\n                onClick={() => {\n                    const logoSVG = document\n                        .querySelector(\"#image-logo svg\")\n                        ?.cloneNode(true) as SVGElement\n                    if (logoSVG) {\n                        // downloadAsZipFromSVGviaClick(logoSVG, [\"png\"], true)\n                        ReactGA.event({\n                            category: \"Logo Maker Creator\",\n                            action: \"Click to download\",\n                            label: \"Download\",\n                            value: 1,\n                        })\n                    }\n                }}\n            >\n                <span>Download</span>\n            </a> */\n","import * as React from 'react'\nimport { Color, ColorChangeHandler, HuePicker } from 'react-color'\n\ntype ColorPickerProps = {\n    color: Color\n    onChange: ColorChangeHandler\n    onChangeComplet?: ColorChangeHandler\n}\n\nconst ColorPicker: React.FunctionComponent<ColorPickerProps> = (props: ColorPickerProps) => {\n    return (\n        <div className=\"color-picker-component\">\n            <HuePicker color={props.color} onChange={props.onChange} onChangeComplete={props?.onChangeComplet} />\n        </div>\n    )\n}\n\nexport default ColorPicker","import * as React from \"react\"\nimport UIStore from \"../../stores/UIStore\"\n// import presetColors from \"../../assets/colors/index\"\nimport classnames from \"classnames\"\nimport ColorPicker from \"./common/ColorPicker\"\n\n/**\n * This function will generate the `Select Coloros Meniu` from design\n */\nconst SelectColor: React.FunctionComponent<unknown> = () => {\n    const [isColorEditorOpen, toggleColorEditor] = React.useState({\n        background: false,\n        logo: false,\n        title: false,\n        slogan: false,\n    })\n\n    const [colors, setColors] = React.useState(\n        UIStore.useState((s) => {\n            return {\n                background: s.container.style.color,\n                logo: s.logo.style.fill,\n                title: s.title.style.color,\n                slogan: s.slogan.style.color,\n            }\n        })\n    )\n\n    const [inputValues, setInput] = React.useState({\n        ...colors,\n    })\n\n    /**\n     * This function will handle inputs by updating the internal & user interface store values.\n     *\n     * @param option The owner of the color\n     * @param value The value of the color\n     */\n    const onInputChangeFor = (option: \"background\" | \"logo\" | \"title\" | \"slogan\", value: string) => {\n        // send the values to the user interface\n        switch (option) {\n            case \"background\":\n                setInput({\n                    ...inputValues,\n                    background: value,\n                })\n                break\n            case \"logo\":\n                setInput({\n                    ...inputValues,\n                    logo: value,\n                })\n                break\n            case \"title\":\n                setInput({\n                    ...inputValues,\n                    title: value,\n                })\n                break\n            case \"slogan\":\n                setInput({\n                    ...inputValues,\n                    slogan: value,\n                })\n                break\n        }\n\n        // before send it to the store, check if the value is a valid hex color\n        // reference: https://stackoverflow.com/questions/8027423/how-to-check-if-a-string-is-a-valid-hex-color-representation/8027444\n        // check it on: https://regexr.com/\n        if (/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(value)) {\n            switch (option) {\n                case \"background\":\n                    setColors({\n                        ...colors,\n                        background: value,\n                    })\n                    UIStore.update((s) => {\n                        s.container.style.color = value\n                    })\n                    break\n                case \"logo\":\n                    setColors({\n                        ...colors,\n                        logo: value,\n                    })\n                    UIStore.update((s) => {\n                        s.logo.style.fill = value\n                    })\n                    break\n                case \"title\":\n                    setColors({\n                        ...colors,\n                        title: value,\n                    })\n                    UIStore.update((s) => {\n                        s.title.style.color = value\n                    })\n                    break\n                case \"slogan\":\n                    setColors({\n                        ...colors,\n                        slogan: value,\n                    })\n                    UIStore.update((s) => {\n                        s.slogan.style.color = value\n                    })\n                    break\n            }\n        }\n    }\n\n    /**\n     * This will show/hide the color picker of the element\n     *\n     * @param option The element bound to the toggle\n     */\n    const toggleColorEditorFor = (option: \"background\" | \"logo\" | \"title\" | \"slogan\") => {\n        switch (option) {\n            case \"background\":\n                toggleColorEditor({\n                    ...isColorEditorOpen,\n                    background: !isColorEditorOpen.background,\n                })\n                break\n            case \"logo\":\n                toggleColorEditor({\n                    ...isColorEditorOpen,\n                    logo: !isColorEditorOpen.logo,\n                })\n                break\n            case \"title\":\n                toggleColorEditor({\n                    ...isColorEditorOpen,\n                    title: !isColorEditorOpen.title,\n                })\n                break\n            case \"slogan\":\n                toggleColorEditor({\n                    ...isColorEditorOpen,\n                    slogan: !isColorEditorOpen.slogan,\n                })\n                break\n        }\n    }\n\n    return (\n        <div className=\"select-colors\">\n            <h1>COLOR PALETTE</h1>\n            <span>\n                Press on the square to toggle the color picker.\n            </span>\n            <p>Background Color</p>\n            <div className=\"container\">\n                <div className=\"input-field\">\n                    <button\n                        className={classnames({ active: isColorEditorOpen.background })}\n                        style={{\n                            backgroundColor: colors.background,\n                        }}\n                        onClick={() => toggleColorEditorFor(\"background\")}\n                    />\n                    <input\n                        id=\"input-color-background\"\n                        value={inputValues.background}\n                        onChange={(e) => onInputChangeFor(\"background\", e.target.value)}\n                    />\n                </div>\n                {isColorEditorOpen.background && (\n                    // <SliderPicker\n                    //     color={colors.background}\n                    //     // presetColors={presetColors}\n                    //     onChange={(c, event) => {\n                    //         event.stopPropagation()\n                    //         onInputChangeFor(\"background\", c.hex)\n                    //         disableBodyScroll(document.body)\n                    //     }}\n                    //     onChangeComplete={(c, event) => {\n                    //         event.stopPropagation()\n                    //         enableBodyScroll(document.body)\n                    //     }}\n\n                    // // disableAlpha={true}\n                    // />\n                    <ColorPicker\n                        color={colors.background}\n                        onChange={(c) => {\n                            onInputChangeFor(\"background\", c.hex)\n                        }}\n                    />\n                )}\n            </div>\n\n            <p>Logo Color</p>\n            <div className=\"container\">\n                <div className=\"input-field\">\n                    <button\n                        className={classnames({ active: isColorEditorOpen.logo })}\n                        style={{\n                            backgroundColor: colors.logo,\n                        }}\n                        onClick={() => toggleColorEditorFor(\"logo\")}\n                    />\n                    <input\n                        id=\"input-color-logo\"\n                        value={inputValues.logo}\n                        onChange={(e) => onInputChangeFor(\"logo\", e.target.value)}\n                    />\n                </div>\n                {isColorEditorOpen.logo && (\n                    // <SliderPicker\n                    //     color={colors.logo}\n                    //     // presetColors={presetColors}\n                    //     onChange={(c, event) => {\n                    //         event.stopPropagation()\n                    //         onInputChangeFor(\"logo\", c.hex)\n                    //         disableBodyScroll(document.body)\n                    //     }}\n                    //     onChangeComplete={(c, event) => {\n                    //         event.stopPropagation()\n                    //         enableBodyScroll(document.body)\n                    //     }}\n                    // // disableAlpha={true}\n                    // />\n                    <ColorPicker\n                        color={colors.logo}\n                        onChange={(c) => {\n                            onInputChangeFor(\"logo\", c.hex)\n                        }}\n                    />\n                )}\n            </div>\n\n            <p>Title Color</p>\n\n            <div className=\"container\">\n                <div className=\"input-field\">\n                    <button\n                        className={classnames({ active: isColorEditorOpen.title })}\n                        style={{\n                            backgroundColor: colors.title,\n                        }}\n                        onClick={() => toggleColorEditorFor(\"title\")}\n                    />\n                    <input\n                        id=\"input-color-title\"\n                        value={inputValues.title}\n                        placeholder=\"Add a color in HEX format.\"\n                        onChange={(e) => onInputChangeFor(\"title\", e.target.value)}\n                    />\n                </div>\n                {isColorEditorOpen.title && (\n                    // <SliderPicker\n                    //     color={colors.title}\n                    //     // presetColors={presetColors}\n                    //     onChange={(c, event) => {\n                    //         event.stopPropagation()\n                    //         onInputChangeFor(\"title\", c.hex)\n                    //         disableBodyScroll(document.body)\n                    //     }}\n                    //     onChangeComplete={(c, event) => {\n                    //         event.stopPropagation()\n                    //         enableBodyScroll(document.body)\n                    //     }}\n                    // // disableAlpha={true}\n                    // />\n                    <ColorPicker\n                        color={colors.title}\n                        onChange={(c) => {\n                            onInputChangeFor(\"title\", c.hex)\n                        }}\n                    />\n                )}\n            </div>\n\n            <p>Slogan Color</p>\n            <div className=\"container\">\n                <div className=\"input-field\">\n                    <button\n                        className={classnames({ active: isColorEditorOpen.slogan })}\n                        style={{\n                            backgroundColor: colors.slogan,\n                        }}\n                        onClick={() => toggleColorEditorFor(\"slogan\")}\n                    />\n                    <input\n                        id=\"input-color-slogan\"\n                        value={inputValues.slogan}\n                        onChange={(e) => onInputChangeFor(\"slogan\", e.target.value)}\n                    />\n                </div>\n                {isColorEditorOpen.slogan && (\n                    // <SliderPicker\n                    //     // onSwatchHover={(c, event) => {\n                    //     //     event.stopPropagation()\n                    //     // }}\n                    //     color={colors.slogan}\n                    //     // presetColors={presetColors}\n                    //     onChange={(c, event) => {\n                    //         event.stopPropagation()\n                    //         onInputChangeFor(\"slogan\", c.hex)\n                    //         disableBodyScroll(document.body)\n                    //     }}\n                    //     onChangeComplete={(c, event) => {\n                    //         event.stopPropagation()\n                    //         enableBodyScroll(document.body)\n                    //     }}\n                    // // disableAlpha={true}\n                    // />\n                    <ColorPicker\n                        color={colors.slogan}\n                        onChange={(c) => {\n                            onInputChangeFor(\"slogan\", c.hex)\n                        }}\n                    />\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default SelectColor\n","import * as React from \"react\"\n\nconst HorizontalLineUIsvg: React.FunctionComponent<{\n    isSelected?: boolean\n    clasName?: string\n}> = (props: { isSelected?: boolean; clasName?: string }) => {\n    return (\n        <svg\n            width=\"58\"\n            height=\"9\"\n            viewBox=\"0 0 58 9\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className={props?.clasName}\n        >\n            <line y1=\"1.25\" x2=\"58\" y2=\"1.25\" stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"} strokeWidth=\"1.5\" />\n            <line y1=\"8.25\" x2=\"58\" y2=\"8.25\" stroke={props?.isSelected ? \"#43C2D1\" : \"#8B8B9C\"} strokeWidth=\"1.5\" />\n        </svg>\n    )\n}\n\nexport default HorizontalLineUIsvg\n","import * as React from \"react\"\nimport classnames from \"classnames\"\nimport HorizontalLineUIsvg from \"./common/HorizontalLineUIsvg\"\nimport LogoUIsvg from \"./common/LogoUIsvg\"\nimport UIStore from \"../../stores/UIStore\"\n\nexport type LogoAlignOptions = \"align-top\" | \"align-left\" | \"align-right\"\n\n/**\n * This function will generate the `Select Layout Meniu` from design\n */\nconst SelectLayout: React.FunctionComponent<unknown> = () => {\n    const alignOption = UIStore.useState((s) => s.container.align)\n\n    return (\n        <div className=\"select-layout\">\n            <h1>LOGO OPTIONS</h1>\n            <p>Select a symbol for the logo</p>\n            <div className=\"options\">\n                <button\n                    className={classnames({ active: alignOption === \"align-top\" })}\n                    onClick={() =>\n                        UIStore.update((s) => {\n                            s.container.align = \"align-top\"\n                        })\n                    }\n                >\n                    <div className=\"align-top\">\n                        <LogoUIsvg isSelected={alignOption === \"align-top\"} />\n                        <HorizontalLineUIsvg isSelected={alignOption === \"align-top\"} />\n                    </div>\n                    <span>Logo TOP</span>\n                </button>\n                <button\n                    className={classnames({ active: alignOption === \"align-left\" })}\n                    onClick={() =>\n                        UIStore.update((s) => {\n                            s.container.align = \"align-left\"\n                        })\n                    }\n                >\n                    <div className=\"align-left\">\n                        <LogoUIsvg isSelected={alignOption === \"align-left\"} />\n                        <HorizontalLineUIsvg isSelected={alignOption === \"align-left\"} />\n                    </div>\n                    <span>Logo LEFT</span>\n                </button>\n                <button\n                    className={classnames({ active: alignOption === \"align-right\" })}\n                    onClick={() =>\n                        UIStore.update((s) => {\n                            s.container.align = \"align-right\"\n                        })\n                    }\n                >\n                    <div className=\"align-right\">\n                        <LogoUIsvg isSelected={alignOption === \"align-right\"} />\n                        <HorizontalLineUIsvg isSelected={alignOption === \"align-right\"} />\n                    </div>\n                    <span>Logo RIGHT</span>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default SelectLayout\n","import { SVG } from \"@svgdotjs/svg.js\"\nimport * as React from \"react\"\nimport { LogoSVGImport } from \"../../assets/logos/index\"\nimport classnames from \"classnames\"\n\nexport type SelectLogoProps = {\n    /** The logo's SVG source */\n    logo: LogoSVGImport\n    /** The flag that indicates if the component is selected in the user interface */\n    isSelected?: boolean\n    /** The function that will trigger when the component is preset */\n    onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\n/**\n * This function will generate the logo representation for the `Select Logo` component\n *\n * @param props The properties necessary for rendering the logo in the menu\n */\nconst LogoItem: React.FunctionComponent<SelectLogoProps> = (props: SelectLogoProps) => {\n    const { onClick, logo } = props\n    const itemRef = React.useRef<HTMLButtonElement>(null)\n\n    React.useEffect(() => {\n        if (itemRef.current) {\n            itemRef.current.textContent = \"\"\n            const svgItem = SVG().addTo(itemRef.current).svg(logo.svg)\n\n            const logoSVG = svgItem.first().node as SVGElement\n            logoSVG.removeAttribute(\"viewBox\")\n            logoSVG.setAttribute(\"viewBox\", `-7 -7 0${svgItem.bbox().width + 13} ${svgItem.bbox().height + 13}`)\n            svgItem\n                .viewbox(0, 0, svgItem.bbox().width + 16, svgItem.bbox().height + 16)\n                .size(77, 77)\n                .addClass(classnames({ active: props?.isSelected }))\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n    }, [logo.svg, props?.isSelected])\n\n    return <button onClick={onClick} ref={itemRef}></button>\n}\n\nexport default LogoItem\n","import * as React from \"react\"\nimport logos, { LogoSVGImport } from \"../../assets/logos/index\"\nimport LogoItem from \"./LogoItem\"\nimport store from \"../../stores/UIStore\"\n\n/**\n * This function will generate the `Select Logo Meniu` from design\n */\nconst SelectLogo: React.FunctionComponent<unknown> = () => {\n    const selectedLogoID = store.useState((s) => s.logo.src.id)\n    const scaleLogo = store.useState((s) => s.logo.scale) || 1.0\n\n    /**\n     * Updated logo source of the user interface store\n     *\n     * @param logo The logo's Svg source\n     */\n    const setLogo = (logo: LogoSVGImport) => {\n        store.update((s) => {\n            s.logo.src = logo\n        })\n    }\n\n    const setScale = (value: number) => {\n        store.update((s) => {\n            s.logo.scale = value\n        })\n    }\n\n    /**\n     * Render the logos for the menu\n     */\n    const renderLogos = () => {\n        return logos.map((logo) => (\n            <LogoItem onClick={() => setLogo(logo)} key={logo.id} logo={logo} isSelected={selectedLogoID === logo.id} />\n        ))\n    }\n\n    return (\n        <div className=\"select-logo\">\n            <h1>{`LOGO OPTIONS (${logos.length})`}</h1>\n            <p>Select the scale</p>\n\n            <div className=\"size-range\">\n                <input\n                    className=\"slider\"\n                    type=\"range\"\n                    id=\"size\"\n                    name=\"size\"\n                    min=\"0.5\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={scaleLogo}\n                    onChange={(e) => {\n                        setScale(parseFloat(e.target.value))\n                    }}\n                />\n                <label htmlFor=\"size\">{scaleLogo.toFixed(1)}x</label>\n            </div>\n\n            <p>Select a symbol for the logo</p>\n            <div\n                className=\"logo-list\"\n            // style={{ maxHeight: 150 + \"px\", overflow: \"auto\" }}\n            >\n                {renderLogos()}\n            </div>\n        </div>\n    )\n}\n\nexport default SelectLogo\n","import * as React from \"react\"\nimport Select from \"react-select\"\nimport { fontsList as fonts } from \"../../assets/fonts/index\"\nimport UIStore from \"../../stores/UIStore\"\n\n\n/**\n * Generate the title size options\n */\nconst titleSizeOptions = [...Array(35).keys()]\n    .map((size) => size + 20)\n    .map((size) => ({\n        value: size,\n        label: size.toString(),\n    }))\n\n/**\n * Generate the slogan size options\n */\nconst sloganSizeOptions = [...Array(35).keys()]\n    .map((size) => size + 12)\n    .map((size) => ({\n        value: size,\n        label: size.toString(),\n    }))\n\n/**\n * This function will generate the `Select Typography Meniu` from design\n */\nconst SelectTypography: React.FunctionComponent<unknown> = () => {\n    /**\n     * Generate the font options\n     */\n    const fontOptions = [\n        ...fonts,\n    ]\n        .sort()\n        .map((font) => ({\n            value: font,\n            label: font,\n        }))\n\n    const onTitleTextChange = (value: string) => {\n        UIStore.update((s) => {\n            s.title.text = value\n        })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onTitleFontFamilyChange = ({ value }: any) => {\n        UIStore.update((s) => {\n            s.title.style.fontFamily = value\n        })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onTitleFontSizeChange = ({ value }: any) => {\n        UIStore.update((s) => {\n            s.title.style.fontSize = value\n        })\n    }\n\n    const onSloganTextChange = (value: string) => {\n        UIStore.update((s) => {\n            s.slogan.text = value\n        })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onSloganFontFamilyChange = ({ value }: any) => {\n        UIStore.update((s) => {\n            s.slogan.style.fontFamily = value\n        })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onSloganFontSizeChange = ({ value }: any) => {\n        UIStore.update((s) => {\n            s.slogan.style.fontSize = value\n        })\n    }\n\n    const disableBoxShadow = {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        control: (base: any) => ({\n            ...base,\n            boxShadow: \"none\",\n        }),\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        option: (styles: Record<string, any>, { data }: { data: { label: string; value: string } }) => {\n            return {\n                ...styles,\n                fontFamily: !Number.isInteger(Number.parseInt(data.value)) ? data.value : \"Noto Sans\",\n            }\n        },\n    }\n\n    const defaultTitleFontFamily = UIStore.useState((s) => s.title.style.fontFamily)\n    const defaultTitleFontSize = UIStore.useState((s) => s.title.style.fontSize)\n\n    const defaultSloganFontFamily = UIStore.useState((s) => s.slogan.style.fontFamily)\n    const defaultSloganFontSize = UIStore.useState((s) => s.slogan.style.fontSize)\n\n    return (\n        <div className=\"select-typography\">\n            <div className=\"title-options\">\n                <h1>LOGO</h1>\n                <label htmlFor=\"select-title-text\">Text</label>\n                <input\n                    id=\"input-typography-text\"\n                    value={UIStore.useState((s) => s.title.text)}\n                    onChange={(e) => onTitleTextChange(e.target.value)}\n                />\n                <label htmlFor=\"select-title-font-family\">Font Family</label>\n                <Select\n                    id=\"select-title-font-family\"\n                    className=\"font-select\"\n                    isSearchable={false}\n                    defaultValue={\n                        fontOptions.filter(({ value }) => value === defaultTitleFontFamily)[0] || {\n                            value: \"Arial\",\n                            label: \"Arial\",\n                        }\n                    }\n                    onChange={onTitleFontFamilyChange}\n                    options={fontOptions}\n                    styles={disableBoxShadow}\n                />\n                <label htmlFor=\"select-title-font-size\">Font Size</label>\n                <Select\n                    id=\"select-title-font-size\"\n                    className=\"font-select\"\n                    isSearchable={false}\n                    defaultValue={\n                        titleSizeOptions.filter(({ value }) => value === defaultTitleFontSize)[0] || {\n                            value: 53,\n                            label: \"53\",\n                        }\n                    }\n                    options={titleSizeOptions}\n                    onChange={onTitleFontSizeChange}\n                    styles={disableBoxShadow}\n                />\n            </div>\n            <div className=\"slogan-options\">\n                <h1>SLOGAN (Optional)</h1>\n                <label htmlFor=\"select-slogan-text\">Text</label>\n                <input\n                    id=\"input-typography-slogan\"\n                    value={UIStore.useState((s) => s.slogan.text)}\n                    onChange={(e) => onSloganTextChange(e.target.value)}\n                />\n                <label htmlFor=\"select-slogan-font-family\">Font Family</label>\n                <Select\n                    id=\"select-slogan-font-family\"\n                    className=\"font-select\"\n                    isSearchable={false}\n                    defaultValue={\n                        fontOptions.filter(({ value }) => value === defaultSloganFontFamily)[0] || {\n                            value: \"Arial\",\n                            label: \"Arial\",\n                        }\n                    }\n                    onChange={onSloganFontFamilyChange}\n                    options={fontOptions}\n                    styles={disableBoxShadow}\n                />\n                <label htmlFor=\"select-slogan-font-size\">Font Size</label>\n                <Select\n                    id=\"select-slogan-font-size\"\n                    className=\"font-select\"\n                    isSearchable={false}\n                    defaultValue={\n                        sloganSizeOptions.filter(({ value }) => value === defaultSloganFontSize)[0] || {\n                            value: 24,\n                            label: \"24\",\n                        }\n                    }\n                    options={sloganSizeOptions}\n                    onChange={onSloganFontSizeChange}\n                    styles={disableBoxShadow}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default SelectTypography\n","import JSZip from \"jszip\"\nimport { DownLoadLinkAction } from \"../Creator\"\nimport { PipelineOptions } from \"./pipeline\"\n\n/**\n * This function creates and URL for the `Blob` builded from the provided Svg\n *\n * @param svg The svg that is going to be exported\n * @returns And URL to the Svg\n */\nexport function exportAsSVGfromDOMviaLink(svg: SVGElement): string {\n    const blob = new Blob([svg.outerHTML], { type: \"image/svg+xml;charset=utf-8\" })\n    return window.URL.createObjectURL(blob)\n}\n\n/**\n * This function will generate and image of the provided Svg using `canvas`\n *\n * @param svg The svg that is going to be exported\n */\nexport function generateCanvasFromSVG(svg: SVGElement): Promise<HTMLCanvasElement> {\n    return new Promise((resolve) => {\n        const img = new Image()\n        const canvas = document.createElement(\"canvas\")\n        const context = canvas.getContext(\"2d\")\n        const width = Number(svg.getAttribute(\"width\")) || 765\n        const height = Number(svg.getAttribute(\"height\")) || 625\n        let safariWasUsed = false\n\n        // const {width, height} = svg.getBoundingClientRect() - not working\n\n        img.onload = () => {\n            canvas.width = width\n            canvas.height = height\n\n            context?.drawImage(img, 0, 0, width, height)\n\n            // clean up the URL of the img's src\n            window.URL.revokeObjectURL(img.src)\n            resolve(canvas)\n        }\n\n        img.onerror = (ev: string | Event) => {\n            // This will work even in Safari for Mac & iOS\n            if (!safariWasUsed) {\n                img.src = \"data:image/svg+xml,\" + svg.outerHTML\n                safariWasUsed = true\n                console.info(\"One day Apple will solve this.\")\n            } else {\n                console.warn(\"Image not found\", ev)\n            }\n        }\n\n        img.src = exportAsSVGfromDOMviaLink(svg)\n    })\n\n    // return canvas\n}\n\n/**\n * This function will extract the `base64` from the provided URL\n *\n * @param dataURL The URL of the image\n */\nfunction getBase64String(dataURL: string): string {\n    const idx = dataURL.indexOf(\"base64,\") + \"base64,\".length\n    return dataURL.substring(idx)\n}\n\n/**\n * This function will add to an `zip` object the images generated from Svg based on the extensions provided\n *\n * @param svg The svg that is going to be exported\n * @param zip The zip element that will containe the generated images\n * @param extensions The extensions that will be used to generate the images\n * @param includeSVG Add the svg element to the zip file\n */\nexport async function addToZipFromSVG(\n    svg: SVGElement,\n    zip: JSZip,\n    extensions: (\"png\" | \"jpg\" | \"webp\")[],\n    includeSVG?: boolean\n): Promise<JSZip> {\n    // Create images\n    const canvas = await generateCanvasFromSVG(svg)\n    const imgs = extensions.map((f) => ({\n        ext: f,\n        dataURL: canvas.toDataURL(`image/${f}`),\n    }))\n\n    // Add images to the zip file\n    imgs.forEach((img) => {\n        zip?.file(`${svg.getAttribute(\"name\") || \"logo\"}.${img.ext}`, getBase64String(img.dataURL), { base64: true })\n    })\n\n    if (includeSVG) {\n        zip?.file(\n            `${svg.getAttribute(\"name\") || \"logo\"}.svg`,\n            new Blob([svg.outerHTML], { type: \"image/svg+xml;charset=utf-8\" })\n        )\n    }\n\n    return zip\n}\n\n/**\n * Definition of a file structure from the zip file\n */\ntype FileFormat = { name: string; width: number; height: number; isTransparent?: boolean; pipeline?: PipelineOptions }\n/**\n * Definition of the folder strucure from the zip file\n */\ntype Folder = {\n    name: string\n    children: (Folder | FileFormat)[]\n}\n\nconst folderStructure: Folder = {\n    name: \"LogoMakerByThemeisle\",\n    children: [\n        {\n            name: \"WordPress\",\n            children: [\n                {\n                    name: \"wordpress_logo_512x512\",\n                    width: 512,\n                    height: 512,\n                },\n                {\n                    name: \"wordpress_logo_transparent_512x512\",\n                    width: 512,\n                    height: 512,\n                    isTransparent: true,\n                },\n            ],\n        },\n        {\n            name: \"Facebook\",\n            children: [\n                {\n                    name: \"facebook_profile_1000x1000\",\n                    width: 1000,\n                    height: 1000,\n                },\n                {\n                    name: \"facebook_cover_1640x624\",\n                    width: 1640,\n                    height: 624,\n                },\n                {\n                    name: \"facebook_image_post_1200x630\",\n                    width: 1200,\n                    height: 630,\n                },\n                {\n                    name: \"facebook_ad_1200x628\",\n                    width: 1200,\n                    height: 624,\n                },\n                {\n                    name: \"facebook_story_1080x1920\",\n                    width: 1080,\n                    height: 1920,\n                },\n            ],\n        },\n        {\n            name: \"Instagram\",\n            children: [\n                {\n                    name: \"instagram_portrait_1080x1350\",\n                    width: 1080,\n                    height: 1350,\n                },\n                {\n                    name: \"instagram_photo_1080x1080\",\n                    width: 1080,\n                    height: 1080,\n                },\n                {\n                    name: \"instagram_landscape_1080x608\",\n                    width: 1080,\n                    height: 608,\n                },\n                {\n                    name: \"instagram_stories_1080x1920\",\n                    width: 1080,\n                    height: 1920,\n                },\n            ],\n        },\n        {\n            name: \"Linkedin\",\n            children: [\n                {\n                    name: \"linkedin_profile_1000x1000\",\n                    width: 1000,\n                    height: 1000,\n                },\n                {\n                    name: \"linkedin_banner_1536x768\",\n                    width: 1536,\n                    height: 768,\n                },\n            ],\n        },\n        {\n            name: \"GoogleApps\",\n            children: [\n                {\n                    name: \"youtube_profile_800x800\",\n                    width: 800,\n                    height: 800,\n                },\n                {\n                    name: \"gmail_profile_400x400\",\n                    width: 400,\n                    height: 400,\n                },\n            ],\n        },\n        {\n            name: \"Twitter\",\n            children: [\n                {\n                    name: \"twitter_profile_1000x1000\",\n                    width: 1000,\n                    height: 1000,\n                },\n                {\n                    name: \"twitter_header_1500x500\",\n                    width: 1500,\n                    height: 500,\n                },\n            ],\n        },\n        {\n            name: \"Pinterest\",\n            children: [\n                {\n                    name: \"pinterest_profile_330x330\",\n                    width: 330,\n                    height: 330,\n                },\n                {\n                    name: \"pinterest_board_800x800\",\n                    width: 800,\n                    height: 800,\n                },\n            ],\n        },\n        {\n            name: \"default_765x625\",\n            width: 765,\n            height: 625,\n        },\n        {\n            name: \"default_transparent_765x625\",\n            width: 765,\n            height: 625,\n            isTransparent: true,\n        },\n        {\n            name: \"default_transparent_1000x1000\",\n            width: 1000,\n            height: 1000,\n            isTransparent: true,\n        },\n        {\n            name: \"favicon_32x32\",\n            width: 32,\n            height: 32,\n            pipeline: \"favicon\",\n        },\n        {\n            name: \"favicon_transparent_32x32\",\n            width: 32,\n            height: 32,\n            isTransparent: true,\n            pipeline: \"favicon\",\n        },\n        {\n            name: \"wallpaper_1920x1080\",\n            width: 1920,\n            height: 1080,\n        },\n    ],\n}\n\nexport type InputSVG = {\n    svg: SVGElement\n    pipeline: PipelineOptions\n}\n\n/**\n * This function will create a `zip` file that will include all the images generated from the folder structure with the provided Svg and extensions\n *\n * @param svg The svg that is going to be exported\n * @param extensions The extensions that will be used to generate the images\n * @param includeSVG Add the svg element to the zip file\n */\nexport async function createZipWithPresets(\n    input: InputSVG[],\n    extensions: (\"png\" | \"jpg\" | \"webp\")[],\n    includeSVG?: boolean\n): Promise<JSZip> {\n    const zipRoot = new JSZip()\n\n    /**\n     * This function generate an image and add it to the zip file which might be a subfolder\n     *\n     * @param zip The zip object with folder in which the file will be added\n     * @param file The data necessary for generating the image\n     */\n    const createFile = async (zip: JSZip, file: FileFormat): Promise<JSZip> => {\n        const svg = (\n            input.find(({ pipeline }) => pipeline === file.pipeline) ||\n            input.find(({ pipeline }) => pipeline === \"editor\")\n        )?.svg\n\n        if (!svg) {\n            return zip\n        }\n\n        const _svg = svg.cloneNode(true) as SVGElement\n        _svg.removeAttribute(\"width\")\n        _svg.removeAttribute(\"height\")\n\n        _svg.setAttribute(\"height\", file.height.toString())\n        _svg.setAttribute(\"width\", file.width.toString())\n        _svg.setAttribute(\"name\", file.name)\n\n        if (file.isTransparent) {\n            _svg.style.backgroundColor = \"transparent\"\n        }\n\n        zip = await addToZipFromSVG(_svg, zip, extensions, false)\n\n        return zip\n    }\n\n    /**\n     * This function will create a folder in the zip object.\n     * If the children is a folder, then it calls itself with that folder\n     * If the children is a file, then it calls the `createFile` function and it wait to generate the image\n     *\n     * @param zip The zip object with folder in which the file or a folder will be added\n     * @param folder The data necessary for generating the folder\n     */\n    const createFolder = async (zip: JSZip, folder: Folder): Promise<void> => {\n        const zipWithFolder = zip.folder(folder.name)\n\n        if (!zipWithFolder) {\n            console.warn(\"Cannot create folder with name: \" + folder.name + \" because the zip object is null!\")\n            return\n        }\n\n        // Build in sequence\n        // for( const fileOrFolder of folder.children) {\n        //     if ('width' in fileOrFolder && 'height' in fileOrFolder) {\n        //         await createFile(zipWithFolder, fileOrFolder)\n        //     } else {\n        //         await createFolder(zipWithFolder, fileOrFolder)\n        //     }\n        // }\n\n        // Build in parallel\n        await Promise.all(\n            folder.children.map(async (fileOrFolder) => {\n                if (\"width\" in fileOrFolder && \"height\" in fileOrFolder) {\n                    await createFile(zipWithFolder, fileOrFolder)\n                } else {\n                    createFolder(zipWithFolder, fileOrFolder)\n                }\n            })\n        )\n    }\n\n    await createFolder(zipRoot, folderStructure)\n\n    if (includeSVG) {\n        input.forEach(({ svg, pipeline }) => {\n            zipRoot?.file(`logo-${pipeline}.svg`, new Blob([svg.outerHTML], { type: \"image/svg+xml;charset=utf-8\" }))\n        })\n    }\n\n    return zipRoot\n}\n\n/**\n * This function will generate an `URL` to the zip that containts the generated images from the provided Svg and extensions\n *\n * @param svg The svg that is going to be exported\n * @param extensions The extensions that will be used to generate the images\n * @param includeSVG Add the svg element to the zip file\n */\nexport async function downloadAsZipFromSVGviaLinkBlob(\n    input: InputSVG[],\n    extensions: (\"png\" | \"jpg\" | \"webp\")[],\n    includeSVG?: boolean\n): Promise<string> {\n    const zip = await createZipWithPresets(input, extensions, includeSVG)\n\n    const blob = await zip.generateAsync({ type: \"blob\", mimeType: \"application/zip\" })\n\n    return URL.createObjectURL(blob)\n}\n\nexport async function createDownloadLinkPipeline(\n    dispatch: React.Dispatch<DownLoadLinkAction>,\n    input: InputSVG[],\n    type: \"svg\" | \"png\" | \"zip\"\n): Promise<void> {\n    let link = \"\"\n\n    switch (type) {\n        case \"zip\":\n            link = await downloadAsZipFromSVGviaLinkBlob(input, [\"png\"], true)\n            break\n        case \"png\":\n            link = (await generateCanvasFromSVG(input[0].svg)).toDataURL(\"image/png\")\n            break\n        case \"svg\":\n            link = exportAsSVGfromDOMviaLink(input[0].svg)\n            break\n    }\n    dispatch({ type: \"publish\", value: link })\n}\n\nexport function download(downloadLink: string, extensions?: string): void {\n    if (downloadLink.length === 0) {\n        return\n    }\n    const a = document.createElement(\"a\")\n\n    a.style.display = \"none\"\n    a.href = downloadLink\n    a.download = `logo.${extensions || \"zip\"}`\n\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n\n    // fetch(props.downloadLink.url)\n    //     .then((res) => console.log(res))\n    //     .catch((err) => console.log(err))\n}\n\n// Legacy & For reference\n\n/**\n * This functions will create variants of proviede Svg based on the internal presets.\n *\n * @param svg The svg that is going to be exported\n */\n// export function createSVGsWithPreset(svg: SVGElement): SVGElement[] {\n//     return presetsFormat.map((preset) => {\n//         const _svg = svg.cloneNode(true) as SVGElement\n//         _svg.removeAttribute(\"width\")\n//         _svg.removeAttribute(\"height\")\n\n//         _svg.setAttribute(\"height\", preset.height.toString())\n//         _svg.setAttribute(\"width\", preset.width.toString())\n//         _svg.setAttribute(\"name\", preset.name)\n\n//         if (preset.isTransparent) {\n//             _svg.style.backgroundColor = \"transparent\"\n//         }\n\n//         return _svg\n//     })\n// }\n// export async function exportAsZipFromSVGviaLink(\n//     svg: SVGElement,\n//     formats: (\"png\" | \"jpg\" | \"webp\")[],\n//     includeSVG?: boolean\n// ): Promise<string> {\n//     const zip = await addToZipFromSVG(svg, new JSZip(), formats, includeSVG)\n\n//     const link = await zip.generateAsync({ type: \"blob\" }).then((content) => {\n//         return URL.createObjectURL(content)\n//     })\n\n//     return link\n// }\n\n// export async function downloadAsZipFromSVGviaLink(\n//     svg: SVGElement,\n//     formats: (\"png\" | \"jpg\" | \"webp\")[],\n//     includeSVG?: boolean\n// ): Promise<string> {\n//     const zip = await createZipWithPresets(svg, formats, includeSVG)\n\n//     const content = await zip.generateAsync({ type: \"base64\", mimeType: \"application/zip\" })\n\n//     return \"data:application/zip; Content-disposition: attachment; base64,\" + content\n// }\n\n// export async function downloadAsZipFromSVGviaClick(\n//     svg: SVGElement,\n//     formats: (\"png\" | \"jpg\" | \"webp\")[],\n//     includeSVG?: boolean\n// ): Promise<void> {\n\n//     const zip = await createZipWithPresets(svg, formats, includeSVG)\n//     zip.generateAsync({ type: \"blob\", mimeType: \"application/zip\" }).then((content) => {\n//         FileSaver.saveAs(content, \"LogoMakerExport\")\n//     })\n// }\n","import * as React from \"react\"\nimport BackUI from \"./components/ui/common/BackUI\"\nimport ColorsUIsvg from \"./components/ui/common/ColorsUIsvg\"\nimport LayoutUIsvg from \"./components/ui/common/LayoutUIsvg\"\nimport LogoUIsvg from \"./components/ui/common/LogoUIsvg\"\nimport ThemeisleUI from \"./components/ui/common/ThemeisleUI\"\nimport TypographyUIsvg from \"./components/ui/common/TypographyUIsvg\"\nimport CreateLogo from \"./components/CreateLogo\"\nimport DownloadButton from \"./components/ui/DownloadButton\"\nimport SelectColor from \"./components/ui/SelectColors\"\nimport SelectLayout from \"./components/ui/SelectLayout\"\nimport SelectLogo from \"./components/ui/SelectLogo\"\nimport SelectTypography from \"./components/ui/SelectTypography\"\nimport classnames from \"classnames\"\nimport \"../src/assets/styles/Creator/creator.scss\"\n\nimport UIStore from \"./stores/UIStore\"\n\nimport { createDownloadLinkPipeline, download } from \"./engine/export\"\nimport { buildPipelines } from \"./engine/pipeline\"\n\nexport type MenuOptions = \"logo\" | \"typography\" | \"layout\" | \"colors\"\n\nexport type DownLoadLinkState = {\n    status: \"loading\" | \"ready\" | \"idle\"\n    url: string\n    downloadType?: \"zip\" | \"png\" | \"svg\"\n}\n\nexport type DownLoadLinkAction = { type: \"create\"; value: \"zip\" | \"png\" | \"svg\" } | { type: \"delete\" } | { type: \"publish\"; value: string }\n\nfunction downloadLinkReducer(prevState: DownLoadLinkState, action: DownLoadLinkAction): DownLoadLinkState {\n    // console.log(\"Download Link\")\n    switch (action.type) {\n        case \"create\":\n            URL.revokeObjectURL(prevState.url)\n            console.time(\"build-time\")\n            return {\n                status: \"loading\",\n                url: \"\",\n                downloadType: action.value\n            }\n        case \"delete\":\n            URL.revokeObjectURL(prevState.url)\n            return {\n                status: \"idle\",\n                url: \"\",\n            }\n        case \"publish\":\n            console.timeEnd(\"build-time\")\n            download(action.value, prevState.downloadType)\n            return {\n                ...prevState,\n                status: \"ready\",\n                url: action.value,\n            }\n        default:\n            return {\n                ...prevState,\n                status: \"idle\",\n                url: \"\",\n            }\n    }\n}\n\n/**\n * This function will crate the main component for the Creator page\n */\nconst Creator: React.FunctionComponent<unknown> = () => {\n    const [menuOption, setMenuOption] = React.useState<MenuOptions>(\"logo\")\n    const [downloadLink, dispatchDownloadLink] = React.useReducer<React.Reducer<DownLoadLinkState, DownLoadLinkAction>>(\n        downloadLinkReducer,\n        {\n            status: \"idle\",\n            url: \"\",\n        }\n    )\n    const store = UIStore.useState()\n\n    /**\n     * Render the right panel based on the option choosed by the user\n     */\n    const renderRightSidePanel = () => {\n        switch (menuOption) {\n            case \"logo\":\n                return <SelectLogo />\n            case \"typography\":\n                return <SelectTypography />\n            case \"layout\":\n                return <SelectLayout />\n            case \"colors\":\n                return <SelectColor />\n        }\n    }\n\n    /**\n     * Send deta to Google Analytics\n     */\n    React.useEffect(() => {\n        //ReactGA.pageview(window.location.pathname + window.location.hash + window.location.search)\n    }, [])\n\n    /**\n     * Generate the download link\n     */\n    React.useEffect(() => {\n        async function createLink(): Promise<void> {\n            const logoSVG = document.querySelector(\"#image-logo svg\")?.cloneNode(true) as SVGElement\n            const favIconRef = document.querySelector(\"#rendering\") as HTMLDivElement\n\n            buildPipelines(store).createFavicon(favIconRef)\n            const favIconSVG = document.querySelector(\"#rendering svg\")?.cloneNode(true) as SVGElement\n            favIconRef.innerHTML = \"\"\n\n            if (logoSVG) {\n                // const link = await downloadAsZipFromSVGviaLinkBlob(\n                //     [\n                //         { pipeline: \"editor\", svg: logoSVG },\n                //         { pipeline: \"favicon\", svg: favIconSVG },\n                //     ],\n                //     [\"png\"],\n                //     true\n                // )\n                // dispatchDownloadLink({ type: \"publish\", value: link })\n                createDownloadLinkPipeline(dispatchDownloadLink, [\n                    { pipeline: \"editor\", svg: logoSVG },\n                    { pipeline: \"favicon\", svg: favIconSVG },\n                ], downloadLink.downloadType || 'zip')\n            }\n        }\n\n        switch (downloadLink.status) {\n            case \"loading\":\n                createLink()\n                break\n            default:\n                break\n        }\n    }, [downloadLink.status, store])\n\n    /**\n     * Store the current options in the seesions manager to be keeped during the page refresh.\n     */\n    React.useEffect(() => {\n        sessionStorage.setItem(\"logo-maker-themeisle\", JSON.stringify(store))\n    }, [store])\n\n    return (\n        <div className=\"logo-creator logo-maker-container\">\n            <div className=\"top-section\">\n                <BackUI to=\"/showcase\" />\n                <ThemeisleUI />\n                <div className=\"download-section\">\n                    <DownloadButton downloadLink={downloadLink} dispatch={dispatchDownloadLink} />\n                </div>\n            </div>\n            <div className=\"main-section\">\n                <div className=\"main-container\">\n                    <div className=\"left-menu\">\n                        <div className=\"options\">\n                            <div className={classnames({ active: menuOption === \"logo\" }, \"option\")}>\n                                <a\n                                    id=\"btn-select-logo\"\n                                    onClick={() => {\n                                        if (window.innerHeight <= 812) {\n                                            console.log(window.innerHeight)\n                                            window.scrollTo(\n                                                0,\n                                                document.querySelector<HTMLDivElement>(\"#right-menu\")?.offsetTop || 0\n                                            )\n                                        }\n                                        setMenuOption(\"logo\")\n                                    }}\n                                    className={classnames({ active: menuOption === \"logo\" })}\n                                >\n                                    <LogoUIsvg isSelected={menuOption === \"logo\"} />\n                                    <span>\n                                        Logo\n                                    </span>\n                                </a>\n                            </div>\n                            <div className={classnames({ active: menuOption === \"typography\" }, \"option\")} >\n                                <a\n                                    id=\"btn-select-typography\"\n                                    onClick={() => {\n                                        if (window.innerHeight <= 812) {\n                                            window.scrollTo(\n                                                0,\n                                                document.querySelector<HTMLDivElement>(\"#right-menu\")?.offsetTop || 0\n                                            )\n                                        }\n                                        setMenuOption(\"typography\")\n                                    }}\n                                    className={classnames({ active: menuOption === \"typography\" })}\n                                >\n                                    <TypographyUIsvg isSelected={menuOption === \"typography\"} />\n                                    <span>\n                                        Typography\n                                    </span>\n                                </a>\n                            </div>\n                            <div className={classnames({active: menuOption === \"layout\" }, \"option\")}>\n                                <a\n                                    id=\"btn-select-layout\"\n                                    onClick={() => {\n                                        if (window.innerHeight <= 812) {\n                                            window.scrollTo(\n                                                0,\n                                                document.querySelector<HTMLDivElement>(\"#right-menu\")?.offsetTop || 0\n                                            )\n                                        }\n                                        setMenuOption(\"layout\")\n                                    }}\n                                    className={classnames({ active: menuOption === \"layout\" })}\n                                >\n                                    <LayoutUIsvg isSelected={menuOption === \"layout\"} />\n                                    <span>\n                                        Layout\n                                    </span>\n                                </a>\n                            </div>\n                            <div className={classnames({active: menuOption === \"colors\" }, \"option\")}>\n                                <a\n                                    id=\"btn-select-colors\"\n                                    onClick={() => {\n                                        if (window.innerHeight <= 812) {\n                                            window.scrollTo(\n                                                0,\n                                                document.querySelector<HTMLDivElement>(\"#right-menu\")?.offsetTop || 0\n                                            )\n                                        }\n                                        setMenuOption(\"colors\")\n                                    }}\n                                    className={classnames({ active: menuOption === \"colors\" })}\n                                >\n                                    <ColorsUIsvg isSelected={menuOption === \"colors\"} />\n                                    <span>\n                                        Colors\n                                    </span>\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"logo\">\n                        <CreateLogo id=\"image-logo\" logoProps={store} />\n                    </div>\n                    <div id=\"right-menu\" className=\"right-menu\">\n                        {renderRightSidePanel()}\n                    </div>\n                </div>\n            </div>\n            <div id=\"rendering\" className=\"rendering-section\"></div>\n        </div>\n    )\n}\n\nexport default Creator\n"],"names":["props","width","height","viewBox","fill","xmlns","className","clasName","fillRule","clipRule","d","isSelected","stroke","strokeWidth","strokeLinecap","strokeLinejoin","React","status","setStatus","download","type","downloadLink","dispatch","value","classnames","onClick","color","onChange","onChangeComplete","onChangeComplet","background","logo","title","slogan","isColorEditorOpen","toggleColorEditor","UIStore","s","container","style","colors","setColors","inputValues","setInput","onInputChangeFor","option","test","toggleColorEditorFor","active","backgroundColor","id","e","target","c","hex","placeholder","y1","x2","y2","alignOption","align","itemRef","current","textContent","svgItem","SVG","addTo","svg","logoSVG","first","node","removeAttribute","setAttribute","bbox","viewbox","size","addClass","ref","selectedLogoID","store","src","scaleLogo","scale","logos","name","min","max","step","parseFloat","htmlFor","toFixed","setLogo","titleSizeOptions","Array","keys","map","label","toString","sloganSizeOptions","fontOptions","fonts","sort","font","disableBoxShadow","control","base","boxShadow","styles","data","fontFamily","Number","isInteger","parseInt","defaultTitleFontFamily","defaultTitleFontSize","fontSize","defaultSloganFontFamily","defaultSloganFontSize","text","isSearchable","defaultValue","filter","options","exportAsSVGfromDOMviaLink","blob","Blob","outerHTML","window","URL","createObjectURL","generateCanvasFromSVG","Promise","resolve","img","Image","canvas","document","createElement","context","getContext","getAttribute","safariWasUsed","onload","drawImage","revokeObjectURL","onerror","ev","console","warn","info","getBase64String","dataURL","idx","indexOf","length","substring","addToZipFromSVG","zip","extensions","includeSVG","f","ext","toDataURL","forEach","file","base64","folderStructure","children","isTransparent","pipeline","createZipWithPresets","input","zipRoot","JSZip","createFile","find","_svg","cloneNode","createFolder","folder","zipWithFolder","all","fileOrFolder","downloadAsZipFromSVGviaLinkBlob","generateAsync","mimeType","createDownloadLinkPipeline","link","downloadLinkReducer","prevState","action","url","time","downloadType","timeEnd","a","display","href","body","appendChild","click","removeChild","menuOption","setMenuOption","dispatchDownloadLink","querySelector","favIconRef","buildPipelines","createFavicon","favIconSVG","innerHTML","createLink","sessionStorage","setItem","JSON","stringify","BackUI","to","ThemeisleUI","innerHeight","log","scrollTo","offsetTop","CreateLogo","logoProps","renderRightSidePanel"],"sourceRoot":""}